trigger:
  branches:
    include:
      - main
      - features/*
      - bugfix/*

stages:
- stage: Initialize
  jobs:
    - job: Setup
      pool:
        vmImage: 'windows-2019'
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PYTHON_VERSION)
          addToPath: true
          architecture: $(PYTHON_ARCH)

      - script: git submodule update --init
        displayName: 'Fetch submodules'

      - task: Cache@2
        inputs:
          key: 'pip | "$(Agent.OS)" | requirements/test_requirements.txt'
          restoreKeys: 'pip | "$(Agent.OS)"'
          path: $(PIP_CACHE_DIR)
        displayName: 'Cache pip packages'

      - script: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r requirements/test_requirements.txt
        displayName: 'Install tools and dependencies'

      - powershell: |
          choco install -y --stoponfirstfailure pkgconfiglite
        displayName: 'Install utilities'

      - powershell: |
          If (Test-Path env:DISABLE_BLAS) {
              python -m pip install . -v -Csetup-args="--vsenv" -Csetup-args="-Dblas=none" -Csetup-args="-Dlapack=none" -Csetup-args="-Dallow-noblas=true"
          }
          elseif (Test-Path env:_USE_BLAS_ILP64) {
              pip install -r requirements/ci_requirements.txt
              spin config-openblas --with-scipy-openblas=64
              $env:PKG_CONFIG_PATH="$pwd/.openblas"
              python -m pip install . -v -Csetup-args="--vsenv"
          } else {
              pip install -r requirements/ci_requirements.txt
              spin config-openblas --with-scipy-openblas=32
              $env:PKG_CONFIG_PATH="$pwd/.openblas"
              python -m pip install . -v -Csetup-args="--vsenv" 
          }
        displayName: 'Build NumPy'

- stage: Test
  dependsOn: Initialize
  jobs:
    - job: Testing
      pool:
        vmImage: 'windows-2019'
      steps:
      - powershell: |
          cd tools
          $env:PATH = "c:\\rtools43\\x86_64-w64-mingw32.static.posix\\bin;$env:PATH"
          If ($env:TEST_MODE -eq "full") {
            Try {
              pytest --pyargs numpy -rsx --junitxml=junit/test-results.xml
            } Catch {
              Write-Host "Error during testing: $_"
              Exit 1
            }
          } else {
            Try {
              pytest --pyargs numpy -m "not slow" -rsx --junitxml=junit/test-results.xml
            } Catch {
              Write-Host "Error during testing: $_"
              Exit 1
            }
          }
        displayName: 'Run NumPy Test Suite'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-*.xml'
          failTaskOnFailedTests: true
          testRunTitle: 'Publish test results for Python $(PYTHON_VERSION) $(BITS)-bit $(TEST_MODE) Windows'
