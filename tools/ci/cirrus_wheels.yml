build_and_store_wheels: &BUILD_AND_STORE_WHEELS
  install_cibuildwheel_script:
    - python -m pip install "cibuildwheel<2.17.0"
  cibuildwheel_script:
    - cibuildwheel
  wheels_artifacts:
    path: "wheelhouse/*"

######################################################################
# Build linux_aarch64 natively
######################################################################

linux_aarch64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder-arm64
    architecture: arm64
    platform: linux
    cpu: 1
    memory: 8G
  matrix:
    # build in a matrix because building and testing all four wheels in a
    # single task takes longer than 60 mins (the default time limit for a
    # cirrus-ci task).
    - env:
        CIRRUS_CLONE_SUBMODULES: true
        CIBW_BUILD: cp39-*
        EXPECT_CPU_FEATURES: NEON NEON_FP16 NEON_VFPV4 ASIMD ASIMDHP ASIMDDP ASIMDFHM

  build_script: |
    apt update
    apt install -y python3-venv python-is-python3 gfortran libatlas-base-dev libgfortran5 eatmydata
    git fetch origin
    bash ./tools/wheels/cibw_before_build.sh ${PWD}
    which python
    echo $CIRRUS_CHANGE_MESSAGE
  <<: *BUILD_AND_STORE_WHEELS


######################################################################
# Build macosx_arm64 natively
######################################################################

macosx_arm64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-monterey-xcode:14
  matrix:
    - env:
        CIRRUS_CLONE_SUBMODULES: true
        CIBW_BUILD: cp39-*
    - env:
        CIRRUS_CLONE_SUBMODULES: true
        CIBW_PRERELEASE_PYTHONS: True
        CIBW_BUILD: cp312-*
  env:
    PATH: /opt/homebrew/opt/python@3.10/libexec/bin:/usr/local/lib:/usr/local/include:$PATH
    CIBW_ARCHS: arm64
    # Specifying CIBW_ENVIRONMENT_MACOS overrides pyproject.toml, so include
    # all the settings from there, otherwise they're lost.
    # SDKROOT needs to be set for repackaged conda-forge gfortran compilers
    # supplied by isuruf.
    # Find out SDKROOT via `xcrun --sdk macosx --show-sdk-path`
    CIBW_ENVIRONMENT_MACOS: >
      RUNNER_OS=macOS
      SDKROOT=/Applications/Xcode-14.0.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk
      LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
      CFLAGS="-fno-strict-aliasing -DBLAS_SYMBOL_SUFFIX=64_ -DHAVE_BLAS_ILP64"
      CXXFLAGS="-DBLAS_SYMBOL_SUFFIX=64_ -DHAVE_BLAS_ILP64"
      OPENBLAS64_="/usr/local"
      NPY_USE_BLAS_ILP64="1"

  build_script:
    - brew install python@3.10
    - which python
    # needed for submodules
    - git submodule update --init
    # need to obtain all the tags so setup.py can determine FULLVERSION
    - git fetch origin
    - uname -m
    - python -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    - clang --version
  <<: *BUILD_AND_STORE_WHEELS

