---
# Pre-commit hooks definition file
#
# This file holds information for file formatting and validation. See
# documentation here:
# https://numpy.org/doc/stable/dev/development_workflow.html?highlight=development%20workflow
# Or the pre-commit docs here:
# https://numpy.org/doc/stable/dev/development_workflow.html
#
# If you add or adjust hooks, or want to update to the latest version, use
# `pre-commit autoupdate --freeze`. This pins the version to the commit hash
# rather than a (movable) tag, which adds some security benefit. This sets the
# "rev:" key and the adds the "# frozen: vx.x.x" comments that you see.
#
# Note that additional_dependencies pins need to be manually updated. Try to
# ensure versiong stay in sync when a dependency is used across multiple
# hooks.

repos:
  ### Always-run hooks ###
  # This section includes hooks that run whenever relevant files change.
  # Basic checkers, fairly self-explanatory
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: 3298ddab3c13dd77d6ce1fc0baf97691430d84b0  # frozen: v4.3.0
    hooks:
      # File validity checkers
      - id: check-yaml
      - id: check-toml

      # Simple cleanliness things
      - id: fix-byte-order-marker
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: mixed-line-ending
      # Defaults to 500 kB
      - id: check-added-large-files

  # "Darker" runs the black formatter, isort import sorter, and
  # flake8 checker only on edited lines rather than entire file
  - repo: https://github.com/akaihola/darker
    rev: 05a0ce72765aa4ed7cab7b722fd8371a4f712423  # frozen: 1.5.0
    hooks:
      - id: darker
        args:
          - --isort
          - -L
          - flake8
        additional_dependencies:
          - isort==5.10.1
          - flake8==4.0.1
          - flake8-bugbear==16.4.0
          - flake8-import-order==0.18.1
          - flake8-builtins==1.5.3
          - flake8-future-annotations==0.0.5
          - flake8-docstrings==1.6.0
          - flake8-rst-docstrings==0.2.6
          - pep8-naming==0.13.0

  # Format changed lines only of C/C++ files
  # We want to use git-clang-format which is provided by the clang-format wheel,
  # but not exposed in its precommit hook.
  # Do not specify args here; use the tools/precommit-clang-format.sh that this
  # calls.
  - repo: local
    hooks:
      - id: clang-format-diff
        name: clang-format-diff
        entry: python tools/precommit-clang-format.py
        language: python        # Script is bash but need python deps
        require_serial: true    # Lock errors if it tries to chunk the files
        types_or: [c++, c]
        verbose: true
        additional_dependencies:
          - clang-format==14.0.6

  # YAML Formatter. Only enabled on one file for now, will add more eventually
  - repo: https://github.com/jumanjihouse/pre-commit-hook-yamlfmt
    rev: d0cf8a7a8e09127a5a61c0644a823544e32f492b  # frozen: 0.2.2
    hooks:
      - id: yamlfmt
        args: [--mapping, '2', --sequence, '4', --offset, '2', --width, '88']
        # Will eventually apply to all YAML files
        files: \.pre-commit-config.yaml


  ### Manually-run hooks ###
  # These hooks are disabled by default because NumPy currently has one or more
  # files that are known to fail. You are encouraged to run these hooks if you
  # are changing some files, and aim to have them pass. However, the goal is
  # that somebody doing development is not required to work on anything outside
  # of their own section of interest, so do not worry if other parts of files fail.
  # (though in general, if you would _like_ to fix them, that would be amazing!)
  # A reason each hook is disabled accompanies each of them

  # Allow black to be run on entire file manually
  # Disabled for now to avoid whole-file commit diffs
  # Run with: pre-commit run --hook-stage manual black
  - repo: https://github.com/psf/black
    rev: f6c139c5215ce04fd3e73a900f1372942d58eca0  # frozen: 22.6.0
    hooks:
      - id: black
        stages: [manual]

  # Apply black formatting to docstrings and .rst files Disabled for now to
  # avoid whole-file commit diffs, diff-only formatter is applied by the
  # "darker" hook
  #
  # NOTE: This hook throws a ton of errors. Most of them are because `..
  # code-block:: python` is used where `.. code-block:: pycon` should be.
  # `python` is for code blocks as one might see in a source file. `pycon` is
  # the correct code block type for python console syntax, i.e., blocks with
  # `>>>`/`...`, like `doctest` might run
  #
  # Run with: pre-commit run --hook-stage manual blacken-docs
  - repo: https://github.com/asottile/blacken-docs
    rev: 7ae9389351f4090e3993de28015a05a18ca6b8a7  # frozen: v1.12.1
    hooks:
      - id: blacken-docs
        stages: [manual]

  # Allow isort to be run on entire file manually
  # Disabled for now to avoid whole-file commit diffs
  # Run with: pre-commit run --hook-stage manual isort
  - repo: https://github.com/pycqa/isort
    rev: c5e8fa75dda5f764d20f66a215d71c21cfa198e1  # frozen: 5.10.1
    hooks:
      - id: isort
        stages: [manual]

  # Allow flake8 to be run on entire file manually
  # Disabled for now because there are about 14k failures, and fixing them
  # requires whole-file changes
  # Run with: pre-commit run --hook-stage manual flake8
  - repo: https://github.com/pycqa/flake8
    rev: cbeb4c9c4137cff1568659fcc48e8b85cddd0c8d  # frozen: 4.0.1
    hooks:
      - id: flake8
        stages: [manual]
        additional_dependencies:
          - flake8-bugbear==16.4.0
          - flake8-import-order==0.18.1
          - flake8-builtins==1.5.3
          - flake8-future-annotations==0.0.5
          - flake8-docstrings==1.6.0
          - flake8-rst-docstrings==0.2.6
          - pep8-naming==0.13.0

  # Allow clang-format to be run on entire file manually
  # Disabled for now to avoid large diffs. clang-format-diff runs this only
  # on changed lines.
  # Run with: pre-commit run --hook-stage manual clang-format
  - repo: https://github.com/pre-commit/mirrors-clang-format
    rev: 4c1506e7e6f7712eee075b58391eabe1192d3adb  # frozen: v14.0.6
    hooks:
      - id: clang-format
        stages: [manual]
        # By default, hook formats c/c++/c#/cuda/java/javascript/json/obj-c/proto
        # But it can't format `jsonc` (json+comments) so we exclude it here
        exclude_types: [json]

  # Validate .rst files
  # Disabled for now because there are a few thousand failures
  # Run with: pre-commit run --hook-stage manual rstcheck
  - repo: https://github.com/myint/rstcheck
    rev: 2e2717d279fc149e1d0e063b42e2def3a08d37c1  # frozen: v6.0.0.post1
    hooks:
      - id: rstcheck
        stages: [manual]

  # bash/sh checker
  # Disabled for now because of ~500 errors
  # Run with: pre-commit run --hook-stage manual shellcheck
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: 4c7c3dd7161ef39e984cb295e93a968236dc8e8a  # frozen: v0.8.0.4
    hooks:
      - id: shellcheck
        stages: [manual]

  # bash/sh formatter
  # Disabled for now because shellcheck fails
  # Run with: pre-commit run --hook-stage manual beautysh
  - repo: https://github.com/lovesegfault/beautysh
    rev: 386e46cf6e6e68e26e90a6c0e8c3d0f0d30c101c  # frozen: v6.2.1
    hooks:
      - id: beautysh
        stages: [manual]

  # Fortran formatter
  # Disabled for now because files need mild cleanup for it to run
  # Run with: pre-commit run --hook-stage manual fprettify
  - repo: https://github.com/pseewald/fprettify
    rev: 71781aaaa0cd513e0e25093a3b69fbdd778e8409  # frozen: v0.3.7
    hooks:
      - id: fprettify
        stages: [manual]

  # Dockerfile linter
  # Disabled for now because of failures
  # Run with: pre-commit run --hook-stage manual hadolint
  - repo: https://github.com/AleksaC/hadolint-py
    rev: ecf2d2c004e7a753f48e44952a81d7c9cf1f202c  # frozen: v2.10.0
    hooks:
      - id: hadolint
        # Ignore not pinning versions on `pip install``
        args: [--ignore, DL3013]
        stages: [manual]
