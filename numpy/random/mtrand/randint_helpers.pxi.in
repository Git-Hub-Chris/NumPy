"""
Template for each `dtype` helper function in `np.random.randint`.
"""

{{
py:
dtypes = (('uint32', 'uint32', 'uint64', 'NPY_UINT64', 0, '0X100000000ULL'),
          ('uint16', 'uint16', 'uint32', 'NPY_UINT32', 0, '0X10000UL'),
          ('uint8', 'uint8', 'uint16', 'NPY_UINT16', 0, '0X100UL'),
          ('bool', 'bool', 'uint8', 'NPY_UINT8', 0, '0x2UL'),
          ('int32', 'uint32', 'uint64', 'NPY_INT64', '-0x80000000LL', '0x80000000LL'),
          ('int16', 'uint16', 'uint32', 'NPY_INT32', '-0x8000LL', '0x8000LL' ),
          ('int8', 'uint8', 'uint16', 'NPY_INT16', '-0x80LL', '0x80LL' ),
)
}}

{{for  nptype, utype, nptype_up, apitype, lb, ub in dtypes}}
cdef object _rand_{{nptype}}_array_path(ndarray low, ndarray high, object size, rk_state *state, object lock):
    """Array path for all types that are not 64 bit"""
    cdef npy_{{utype}} rng, off, val
    cdef npy_uint32 buf
    cdef ndarray out_arr
    cdef npy_{{utype}} *out_data
    cdef npy_{{nptype_up}} low_v, high_v
    cdef npy_intp i, cnt
    cdef broadcast it
    cdef int buf_rem = 0

    if np.any(np.less(low, {{lb}})):
        raise ValueError('low is out of bounds for {{nptype}}')
    if np.any(np.greater(high, {{ub}})):
        raise ValueError('high is out of bounds for {{nptype}}')
    if np.any(np.greater_equal(low, high)):
        raise ValueError('low >= high')

    low = <ndarray>PyArray_FROM_OTF(low, {{apitype}}, NPY_ARRAY_ALIGNED | NPY_ARRAY_FORCECAST)
    high = <ndarray>PyArray_FROM_OTF(high, {{apitype}}, NPY_ARRAY_ALIGNED | NPY_ARRAY_FORCECAST)

    if size is not None:
        out_arr = <ndarray>np.empty(size, np.{{nptype}})
    else:
        it = <broadcast>PyArray_MultiIterNew(2, <void *>low, <void *>high)
        out_arr = <ndarray>np.empty(it.shape, np.{{nptype}})

    it = <broadcast>PyArray_MultiIterNew(3, <void *>low, <void *>high, <void *>out_arr)
    out_data = <npy_{{utype}} *>PyArray_DATA(out_arr)
    cnt = PyArray_SIZE(out_arr)
    with lock, nogil:
        for i in range(cnt):
            low_v = (<npy_{{nptype_up}}*>PyArray_MultiIter_DATA(it, 0))[0]
            high_v = (<npy_{{nptype_up}}*>PyArray_MultiIter_DATA(it, 1))[0]
            rng = <npy_{{utype}}>((high_v - 1) - low_v)
            off = <npy_{{utype}}>(<npy_{{nptype_up}}>low_v)

            out_data[i] = rk_random_{{utype}}(off, rng, &buf, &buf_rem, state);

            PyArray_MultiIter_NEXT(it)

    return out_arr
{{endfor}}

{{
py:
dtypes64 = (('uint64', 'uint64', 'NPY_UINT64', '0x0ULL', '0xFFFFFFFFFFFFFFFFULL'),
            ('int64', 'uint64', 'NPY_INT64', '-0x8000000000000000LL', '0x7FFFFFFFFFFFFFFFLL' )
)
}}
{{for  nptype, utype, apitype, lb, ub in dtypes64}}
cdef object _rand_{{nptype}}_array_path(ndarray low, ndarray high, object size, rk_state *state, object lock):
    """
    Array path for 64 bit integers

    This path is needed since verification of bounds requires casting to
    Python ints which is slow.
    """
    cdef ndarray out_arr, highm1_arr
    cdef npy_intp i, cnt
    cdef broadcast it
    cdef object closed_upper
    cdef npy_uint64 *out_data
    cdef npy_{{nptype}} *highm1_data
    cdef npy_{{nptype}} low_v, high_v
    cdef npy_uint64 rng, val, off, out_val

    if np.any(np.less(low, {{lb}})):
        raise ValueError('low is out of bounds for {{nptype}}')

    highm1_arr = <ndarray>np.empty_like(high, dtype=np.{{nptype}})
    highm1_data = <npy_{{nptype}} *>PyArray_DATA(highm1_arr)
    cnt = PyArray_SIZE(high)
    flat = high.flat
    for i in range(cnt):
        closed_upper = int(flat[i]) - 1
        if closed_upper > {{ub}}:
            raise ValueError('high is out of bounds for {{nptype}}')
        if closed_upper < {{lb}}:
            raise ValueError('low >= high')

        highm1_data[i] = <npy_{{nptype}}>closed_upper

    if np.any(np.greater(low, highm1_arr)):
        raise ValueError('low >= high')

    high = highm1_arr
    low = <ndarray>PyArray_FROM_OTF(low, {{apitype}}, NPY_ARRAY_ALIGNED | NPY_ARRAY_FORCECAST)

    if size is not None:
        out_arr = <ndarray>np.empty(size, np.{{nptype}})
    else:
        it = <broadcast>PyArray_MultiIterNew(2, <void *>low, <void *>high)
        out_arr = <ndarray>np.empty(it.shape, np.{{nptype}})

    it = <broadcast>PyArray_MultiIterNew(3, <void *>low, <void *>high, <void *>out_arr)
    out_data = <npy_uint64 *>PyArray_DATA(out_arr)
    n = PyArray_SIZE(out_arr)
    with lock, nogil:
        for i in range(n):
            low_v = (<npy_{{nptype}}*>PyArray_MultiIter_DATA(it, 0))[0]
            high_v = (<npy_{{nptype}}*>PyArray_MultiIter_DATA(it, 1))[0]
            rng = <npy_{{utype}}>(high_v - low_v) # No -1 here since implemented above
            off = <npy_{{utype}}>low_v

            out_data[i] = rk_random_{{utype}}(off, rng, state);
            PyArray_MultiIter_NEXT(it)

    return out_arr
{{endfor}}

{{
py:
dtypes = (('uint64', 'uint64', '0x0ULL', '0XFFFFFFFFFFFFFFFFULL'),
          ('uint32', 'uint32', '0x0ULL', '0XFFFFFFFFULL'),
          ('uint16', 'uint16', '0x0ULL', '0XFFFFUL'),
          ('uint8', 'uint8', '0x0ULL', '0XFFUL'),
          ('bool', 'bool', '0x0ULL', '0x1UL'),
          ('int64', 'uint64', '-0x8000000000000000LL', '0x7FFFFFFFFFFFFFFFLL'),
          ('int32', 'uint32', '-0x80000000LL', '0x7FFFFFFFLL'),
          ('int16', 'uint16', '-0x8000LL', '0x7FFFLL' ),
          ('int8', 'uint8', '-0x80LL', '0x7FLL' ),
)
}}

{{for  nptype, utype, lb, ub in dtypes}}
{{ py: otype = nptype + '_' if nptype == 'bool' else nptype }}
cdef object _rand_{{nptype}}(object low, object high, object size, object rngstate, object lock):
    """
    _rand_{{nptype}}(low, high, size, *state, lock)

    Return random np.{{nptype}} integers between `low` and `high`, inclusive.

    Return random integers from the "discrete uniform" distribution in the
    closed interval [`low`, `high`).  If `high` is None (the default),
    then results are from [0, `low`). On entry the arguments are presumed
    to have been validated for size and order for the np.{{nptype}} type.

    Parameters
    ----------
    low : int or array-like
        Lowest (signed) integer to be drawn from the distribution (unless
        ``high=None``, in which case this parameter is the *highest* such
        integer).
    high : int or array-like
        If provided, the largest (signed) integer to be drawn from the
        distribution (see above for behavior if ``high=None``).
    size : int or tuple of ints
        Output shape.  If the given shape is, e.g., ``(m, n, k)``, then
        ``m * n * k`` samples are drawn.  Default is None, in which case a
        single value is returned.
    state : augmented random state
        State to use in the core random number generators
    lock : threading.Lock
        Lock to prevent multiple using a single RandomState simultaneously

    Returns
    -------
    out : python scalar or ndarray of np.{{nptype}}
          `size`-shaped array of random integers from the appropriate
          distribution, or a single such random int if `size` not provided.
    """
    cdef npy_{{utype}} rng, off, val, out_val
    cdef npy_{{utype}} *out_data
    cdef ndarray low_arr, high_arr, out_arr
    cdef npy_intp i, cnt, low_ndim, high_ndim
    cdef rk_state *state = <rk_state *>PyCapsule_GetPointer(rngstate, NULL)

    if size is not None and np.prod(size) == 0:
        return np.empty(size, np.{{nptype}})

    low = np.asarray(low)
    high = np.asarray(high)
    low_ndim = PyArray_NDIM(<ndarray>low)
    high_ndim = PyArray_NDIM(<ndarray>high)
    if ((low_ndim == 0 or (low_ndim==1 and low.size==1 and size is not None)) and
            (high_ndim == 0 or (high_ndim==1 and high.size==1 and size is not None))):
        low = int(low) 
        high = int(high)
        high -= 1  # Transform to closed interval
        
        if low < {{lb}}:
            raise ValueError("low is out of bounds for {{nptype}}")
        if high > {{ub}}:
            raise ValueError("high is out of bounds for {{nptype}}")
        if low > high:
            raise ValueError("low >= high")

        
        rng = <npy_{{utype}}>(high - low)
        off = <npy_{{utype}}>(<npy_{{nptype}}>low)
        if size is None:
            with lock:
                rk_random_{{utype}}_fill(off, rng, 1, &out_val, state)
            return np.{{otype}}(<npy_{{nptype}}>out_val)
        else:
            out_arr = <ndarray>np.empty(size, np.{{nptype}})
            cnt = PyArray_SIZE(out_arr)
            out_data = <npy_{{utype}} *>PyArray_DATA(out_arr)
            with lock, nogil:
                rk_random_{{utype}}_fill(off, rng, cnt, out_data, state)
            return out_arr

    return _rand_{{nptype}}_array_path(low, high, size, state, lock)
{{endfor}}
