.. _howto-docs:

############################################
How to contribute to the NumPy documentation
############################################

The *Documentation* for a software project is the set of reference,
instructional, educational, informative material generated by the project
developers and contributors, as well as discussions, presentations, videos and
other user generated content. It may include learning-oriented content (such as
Tutorials and How Tos), Use Cases or in depth explanations and reference for
developers. 

If you're reading this page, you probably want to help. This guide is meant to
help you decide which kind of content you'll write, as well as give you some
tips and instructions for submitting it to the official NumPy documentation
(that is, the documentation that ships with NumPy and lives on the official
project pages). Keep in mind that if you don't want to do this, writing a
tutorial on your own blog, creating a youtube video or answering questions on
social media or the slack channel are also great contributions! 

NumPy has a Documentation team. We have open meetings on Zoom every three weeks
and invite everyone to join. Don't hesitate to reach out if you have questions
or just need someone to guide you through your first steps - we're always happy
to help. Meetings are usually announced on the `numpy-discussion mailing list
<https://mail.python.org/mailman/listinfo/numpy-discussion>`_. Meeting minutes
are stored `on hackmd.io <https://hackmd.io/oB_boakvRqKR-_2jRV-Qjg>`_.

You can find a summary of our long term goals for the documentation `at our
github project <https://github.com/orgs/numpy/projects/2>`_.

Current vision for the documentation: NEP 44
--------------------------------------------

Recently, the NumPy community approved a *NumPy Enhancement Proposal (NEP)*
about documentation. You can read it `here
<https://www.numpy.org/neps/nep-0044-restructuring-numpy-docs>`_.

**Where is the documentation?**

The main page for the :ref:`NumPy Documentation <manual>` lists several
categories. The documents mentioned there live in different places.

- **Tutorials, How Tos, Explanations:** These documents are stored in the NumPy
  source code tree, which means that in order to add them to the official
  documentation, you have to download the NumPy source code, build it and
  submit your changes via a :ref:`github pull request <devindex>`.

- **API Reference:** These are mainly the result of rendering the NumPy code
  `docstrings <https://www.python.org/dev/peps/pep-0257/>`_ into formatted
  documents. They are automatically generated when NumPy is built from source.

**Datasets**

If you are writing a tutorial or how to, we encourage you to use real images and
data (provided they are appropriately licensed and available). This makes the
material more engaging for readers, and choosing the right data can add
pedagogical value to your content.

Creating new content
--------------------

The documentation is written in restructuredText, which is the format required
by Sphinx, the tool most Python projects use to automatically build and link the
documentation within the project. You can read this
`Sphinx Quick Reference Guide
<https://docutils.sourceforge.io/docs/user/rst/quickref.html>`__ for more
information. 

If you have already decided which type of document you want to write, you can
check out the following specific guides:

- Guide to writing Tutorials
- :ref:`Guide to writing Reference (API): the numpydoc docstring guide
  <howto-document>`

Other ways to contribute
------------------------

If you see a good tutorial, how to or explanation that is not included in the
official documentation, you can suggest it to be added by `opening an issue on
github <htpps://github.com/numpy/numpy/issues>`_. Similarly, opening issues to
suggest a tutorial, how to or explanation that you can't find anywhere is a
great way to help the documentation team direct efforts towards what users are
looking for. `See this issue <https://github.com/numpy/numpy/issues/15760>`_ for
an example of how to do this.

Finally, if you detect a typo or an error in the documentation, or would like to
suggest a different approach, you can also open an issue or submit a pull
request with your suggestion.

**Final tips**

- Don't worry if english is not your first language. Do your best - we'll revise
  your content and make sure we fix any issues with the code or text.
- If you are unsure whether your tutorial is useful to the community, consider
  submitting an issue on github suggesting it, or asking on the mailing
  list/slack channel.
- If you are unfamiliar with git/github or the process of submitting a pull
  request (PR), check our :ref:`Contributor Guide <devindex>`. 

**Other interesting material**

- `writethedocs.org <https://www.writethedocs.org/>`__ has a lot of interesting
  resources for technical writing.
- Google offers two free `Technical Writing Courses
  <https://developers.google.com/tech-writing>`__
- `Software Carpentry <https://software-carpentry.org/software>`__ has a lot of
  nice recommendations for creating educational material.
