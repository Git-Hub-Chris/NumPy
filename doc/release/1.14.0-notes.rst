==========================
NumPy 1.14.0 Release Notes
==========================

This release supports Python 2.7 and 3.4 - 3.6.


Highlights
==========

* The `np.einsum` function will use BLAS when possible


New functions
=============

* ``parametrize`` decorator added to numpy.testing


Deprecations
============


Future Changes
==============


Build System Changes
====================


Compatibility notes
===================

``np.tensordot`` now returns zero array when contracting over 0-length dimension
--------------------------------------------------------------------------------
Previously ``np.tensordot`` raised a ValueError when contracting over 0-length
dimension. Now it returns a zero array, which is consistent with the behaviour
of ``np.dot`` and ``np.einsum``.

``np.ma`` functions producing ``fill_value``s have changed
----------------------------------------------------------
Previously, ``np.ma.default_fill_value`` would return a 0d array, but
``np.ma.minimum_fill_value`` and ``np.ma.maximum_fill_value`` would return a
tuple of the fields. Instead, all three methods return a structured ``np.void``
object, which is what you would already find in the ``.fill_value`` attribute.

Additionally, the dtype guessing now matches that of ``np.array`` - so when
passing a python scalar ``x``, ``maximum_fill_value(x)`` is always the same as
``maximum_fill_value(np.array(x))``. Previously ``x = long(1)`` on Python 2
violated this assumption.

``numpy.testing`` reorganized
-----------------------------
This is not expected to cause problems, but possibly something has been left
out. If you experience an unexpected import problem using ``numpy.testing``
let us know.


C API changes
=============

Change internal UPDATEIFCOPY semantics
--------------------------------------
When ndarrays are created with the ``UPDATEIFCOPY`` flag, a temporary copy of
the data is created. The writeback to the original data occurrs at ndarray
deallocation. Refactor the writeback into a new PyArray_ResolveUpdateIfCopy
function and use it internally wherever such an array is created. The only
visible change in behavior is that if compiled with ``-DDEPRECATE_UPDATEIFCOPY``
or if run on PyPy, and writeback resolution has not occurred before calling
``array_dealloc``, NumPy will now raise a DeprecationWarning.

Additionally, deprecrate the NPY_ARRAY_UPDATEIFCOPY flag, replace it with
NPY_ARRAY_UPDATEIFCOPY_CLEAR_B4_EXIT. This was done to encourage downstream
consumers of the C-API to properly use the PyArray_ResolveUpdateIfCopy
function. Calling ndarray creation functions such as PyArray_FromArray where
flags uses NPY_ARRAY_UPDATEIFCOPY will raise a DeprecationWarning.

New Features
============

External ``nose`` plugins are usable by ``numpy.testing.Tester``
----------------------------------------------------------------
``numpy.testing.Tester`` is now aware of ``nose`` plugins that are outside the
``nose`` built-in ones.  This allows using, for example, ``nose-timer`` like
so:  ``np.test(extra_argv=['--with-timer', '--timer-top-n', '20'])`` to
obtain the runtime of the 20 slowest tests.  An extra keyword ``timer`` was
also added to ``Tester.test``, so ``np.test(timer=20)`` will also report the 20
slowest tests.

``parametrize`` decorator added to ``numpy.testing``
----------------------------------------------------
A basic ``parametrize`` decorator is now available in ``numpy.testing``. It is
intended to allow rewriting yield based tests that have been deprecated in
pytest so as to facilitate the transition to pytest in the future. The nose
testing framework has not been supported for several years and looks like
abandonware.

The new ``parametrize`` decorator does not have the full functionality of the
one in pytest. It doesn't work for classes, doesn't support nesting, and does
not substitute variable names. Even so, it should be adequate to rewrite the
NumPy tests.


Improvements
============

The GIL is released for all ``np.einsum`` variations
----------------------------------------------------
Some specific loop structures which have an accelerated loop version
did not release the GIL prior to NumPy 1.14.0.  This oversight has been
fixed.

The `np.einsum` function will use BLAS when possible and optimize by default
----------------------------------------------------------------------------
The ``np.einsum`` function will now call ``np.tensordot`` when appropriate.
Because ``np.tensordot`` uses BLAS when possible, that will speed up execution.
By default, ``np.einsum`` will also attempt optimization as the overhead is
small relative to the potential improvement in speed.


Changes
=======

0d arrays now print their elements like other arrays
----------------------------------------------------
0d arrays now use the array2string formatters to print their elements, like
other arrays. The ``style`` argument of ``array2string`` is now non-functional.

Integer scalars are now unaffected by ``np.set_string_function``
----------------------------------------------------------------
Previously the str/repr of integer scalars could be controlled by
``np.set_string_function``, unlike most other numpy scalars. This is no longer
the case.
